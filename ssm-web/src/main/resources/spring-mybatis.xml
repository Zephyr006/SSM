<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-3.1.xsd
                http://www.springframework.org/schema/tx
                http://www.springframework.org/schema/tx/spring-tx.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:conf/dubbo.properties</value>
                <!--log4j2.properties日志文件只能放在classpath下，否则需做特殊配置-->
                <value>classpath:log4j2.properties</value>
                <!--<value>classpath:conf/jdbc.properties</value>-->
            </list>
        </property>
    </bean>


    <!-- 自动扫描包下的注解 -->
    <context:component-scan base-package="cn.ssm.web"/>

    <import resource="classpath:dubbo/dubbo-consumer.xml"/>

    <bean class="cn.ssm.core.utils.SpringContextUtil"/>



    <!-- 配置druid数据源 -->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${driverClass}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
    </bean>-->

    <!-- spring和MyBatis完美整合，不需要单独配置mybatis的配置文件，即可将实体类的映射文件自动绑定到接口 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        &lt;!&ndash;此处加载mybatis配置文件只是为了在*Mapper.xml文件中使用别名（alias），不使用别名可以删除该配置文件&ndash;&gt;
        <property name="configLocation" value="classpath:conf/mybatis-config.xml"/>
        &lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;
        &lt;!&ndash;<property name="mapperLocations" value="classpath:query/*.xml"/>&ndash;&gt;
        &lt;!&ndash;<property name="mapperLocations" value="classpath:sqlmap/*.xml"></property>&ndash;&gt;
    </bean>-->

    <!-- 一：配置事务管理器,用JtaTransactionManager做全局事务管理  transactionManager是该bean的默认名称-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        &lt;!&ndash; 注入数据库连接池 &ndash;&gt;
        <property name="dataSource" ref="dataSource"/>
    </bean>
    &lt;!&ndash; 二：开启基于注解的声明式事务管理，在方法或类上使用 @Transactional进行事务管理，该注解只对public方法生效。 &ndash;&gt;
    <tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>